{
  "language": "Solidity",
  "sources": {
    "contracts/CoinFlip.sol": {
      "content": "pragma solidity 0.8.6;\n\n// SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n//import \"hardhat/console.sol\";\n\ncontract CoinFlip is Ownable {\n    struct Game {\n        uint256 id;\n        address payable player;\n        uint256 bet;\n        uint256 prize;\n        uint256 choice;\n        uint256 result;\n        GameState state;\n    }\n\n    enum GameState {PENDING, WON, LOST}\n\n    /// Number of all games\n    uint256 public totalGamesCount;\n    /// Coefficient for win. x / 100\n    uint256 public WIN_COEFFICIENT = 195;\n    /// Minimal amount for bet\n    uint256 public minEtherBet = 0.1 ether;\n    /// Maximal amount for bet\n    uint256 public maxEtherBet = 10 ether;\n    /// Profit from bets\n    int256 public houseProfitEther;\n\n    /// Croupier\n    address public croupier;\n    /// Person how will receive houseProfitEther\n    address public profitTaker;\n\n    /// Info of each game\n    mapping(bytes32 => Game) public games;\n\n    /// Games seeds\n    bytes32[] public listGames;\n\n    event GameCreated(\n        address indexed player,\n        uint256 bet,\n        uint256 choice,\n        bytes32 seed\n    );\n\n    event GamePlayed(\n        address indexed player,\n        uint256 bet,\n        uint256 prize,\n        uint256 choice,\n        uint256 result,\n        bytes32 indexed seed,\n        GameState state\n    );\n\n    constructor() {\n        croupier = msg.sender;\n        profitTaker = msg.sender;\n    }\n\n    // Modifier for functions that can only be ran by the croupier\n    modifier onlyCroupier() {\n        require(\n            msg.sender == croupier,\n            'Only the croupier can run this function.'\n        );\n        _;\n    }\n\n    // Modifier for functions that can only be ran by the profit taker\n    modifier onlyProfitTaker() {\n        require(\n            msg.sender == profitTaker,\n            \"Only the profit taker can run this function.\"\n        );\n        _;\n    }\n\n    // Check that the rate is between min and max bet\n    modifier betInRange() {\n        require(minEtherBet <= msg.value && msg.value <= maxEtherBet, 'Rate is not between min and max bet');\n        _;\n    }\n\n    /// Check that sedd is unique\n    modifier uniqueSeed(bytes32 _seed) {\n        require(games[_seed].id == 0, \"Seed already used\");\n        _;\n    }\n\n    /**\n        * @notice Add new game\n        * @param _seed: Uniqual value for each game\n    */\n    function play(uint256 _choice, bytes32 _seed) public payable betInRange uniqueSeed(_seed) {\n        require(_choice == 0 || _choice == 1, 'Choice should be 0 or 1');\n\n        uint256 possiblePrize = msg.value * WIN_COEFFICIENT / 100;\n        require(\n            possiblePrize < address(this).balance,\n            'Insufficent funds on contract to cover the bet'\n        );\n\n        Game storage game = games[_seed];\n\n        totalGamesCount++;\n\n        game.id = totalGamesCount;\n        game.player = payable(msg.sender);\n        game.bet = msg.value;\n        game.choice = _choice;\n        game.state = GameState.PENDING;\n\n        houseProfitEther += int256(game.bet);\n        listGames.push(_seed);\n\n        emit GameCreated(\n            game.player,\n            game.bet,\n            game.choice,\n            _seed\n        );\n    }\n\n    /**\n        * @notice Confirm the game, with seed\n        * @param _seed: Uniqual value for each game\n    */\n    function confirm(\n        bytes32 _seed,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) public onlyCroupier {\n        Game storage game = games[_seed];\n\n        require(game.state == GameState.PENDING, 'Game already played');\n\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n        bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, _seed));\n\n        require(ecrecover(prefixedHash, _v, _r, _s) == croupier, 'Invalid signature');\n\n        game.result = uint256(_s) % 2;\n        \n        if (game.choice == game.result) {\n            game.prize = game.bet * WIN_COEFFICIENT / 100;\n            game.state = GameState.WON;\n            \n            houseProfitEther -= int256(game.prize);\n            \n            game.player.transfer(game.prize);\n        } else {\n            game.prize = 0;\n            game.state = GameState.LOST;\n        }\n\n        emit GamePlayed(\n            game.player,\n            game.bet,\n            game.prize,\n            game.choice,\n            game.result,\n            _seed,\n            game.state\n        );\n    }\n\n    /**\n        * @notice Set new minEtherBet and maxEtherBet\n        * @param _min: New minEtherBet\n        * @param _max: New maxEtherBet\n    */\n    function setBetRange(uint256 _min, uint256 _max) public onlyOwner {\n        minEtherBet = _min;\n        maxEtherBet = _max;\n    }\n\n    /**\n        * @notice Set new WIN_COEFFICIENT    \n        * @param amount: New WIN_COEFFICIENT\n    */\n    function setWinCoefficient(uint256 amount)\n        public\n        onlyOwner\n        returns (uint256)\n    {\n        WIN_COEFFICIENT = amount;\n        return WIN_COEFFICIENT;\n    }\n\n    /**\n        * @notice Set new croupier\n        * @param _croupier: New croupier\n    */\n    function setCroupier(address _croupier) public onlyOwner {\n        croupier = _croupier;\n    }\n\n    /**\n        * @notice Set new profitTaker\n        * @param _profitTaker: New profitTaker\n    */\n    function setProfitTaker(address _profitTaker) public onlyOwner {\n        profitTaker = _profitTaker;\n    }\n\n    /**\n        * @notice sends houseProfitEther to profitTaker\n    */\n    function takeProfit() public onlyProfitTaker {\n        if (houseProfitEther > 0) {\n            payable(profitTaker).transfer(uint256(houseProfitEther));\n            houseProfitEther = 0;\n        }\n    }\n\n    /**\n        * @notice sends contract's excessive balance to owner\n    */\n    function withdraw() public onlyOwner {\n        if (houseProfitEther > 0) {\n            payable(owner()).transfer(address(this).balance - uint256(houseProfitEther));\n            return;\n        } \n\n        payable(owner()).transfer(address(this).balance);\n    }\n\n    receive() external payable {}\n\n    // Fallback function\n    fallback() external {}\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}